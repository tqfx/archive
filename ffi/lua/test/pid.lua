#!/usr/bin/env lua

package.path = arg[0]:sub(0, -arg[0]:match("([^/\\]*)$"):len() - 1) .. "?.lua;" .. package.path
local test = require("test")
local a = require("liba")
test:r(getmetatable(a.pid))
assert(a.pid.new(1, -10, 10))
assert(a.pid.new(1, -10, 10, 10))
assert(a.pid.new(1, 10, 0.1, 1, -10, 10))
assert(a.pid.new(1, 10, 0.1, 1, -10, 10, 10))
ctx = a.pid.new(1, 10, 0.1, 1, -10, 10, 10)
assert(a.pid.kpid(ctx, 3, 2, 1))
assert(a.pid:kpid(ctx, 3, 2, 1))
assert(a.pid.proc(ctx, 1, 0))
assert(a.pid:proc(ctx, 1, 0))
assert(a.pid.time(ctx, 0.1))
assert(a.pid:time(ctx, 0.1))
assert(a.pid.zero(ctx))
assert(a.pid:zero(ctx))
assert(a.pid.pos(ctx, 10))
assert(a.pid:pos(ctx, 10))
assert(a.pid.inc(ctx))
assert(a.pid:inc(ctx))
assert(a.pid.off(ctx))
assert(a.pid:off(ctx))
tab = a.pid.into(ctx)
ctx = a.pid.from(tab)
tab = a.pid:into(ctx)
ctx = a.pid:from(tab)
test:r(getmetatable(ctx))
ctx = a:pid(1, 10, 0.1, 1, -10, 10, 10)
ctx:kpid(3, 2, 1):time(0.1):off():inc():pos(10)
assert(ctx:from(tab))
assert(ctx:into())
assert(ctx(1, 0))
